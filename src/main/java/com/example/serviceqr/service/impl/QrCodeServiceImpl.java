package com.example.serviceqr.service.impl;

import com.example.serviceqr.models.Bonus;
import com.example.serviceqr.models.Order;
import com.example.serviceqr.models.QrCode;
import com.example.serviceqr.repository.BonusRepository;
import com.example.serviceqr.repository.OrderRepository;
import com.example.serviceqr.repository.QrCodeRepository;
import com.example.serviceqr.service.QrCodeService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Slf4j
public class QrCodeServiceImpl implements QrCodeService {

    private final QrCodeRepository qrCodeRepository;
    private final TelegramService telegramService;
    private final BonusService bonusService;
    private final BonusRepository bonusRepository;
    private final OrderRepository orderRepository;

    @Transactional
    public String redeemQrCode(String token) {
        log.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞: {}", token);

        Optional<QrCode> qrCodeOpt = qrCodeRepository.findByCode(token);

        if (qrCodeOpt.isEmpty()) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π QR-–∫–æ–¥: {}", token);
            return "‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π QR-–∫–æ–¥!";
        }

        QrCode qrCode = qrCodeOpt.get();

        if (qrCode.isUsed()) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è QR-–∫–æ–¥–∞: {}", token);
            return "‚ö†Ô∏è QR-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!";
        }

        if (qrCode.getExpiresAt().isBefore(LocalDateTime.now())) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π QR-–∫–æ–¥: {}", token);
            return "‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è QR-–∫–æ–¥–∞ –∏—Å—Ç—ë–∫!";
        }

        qrCode.setUsed(true);
        qrCodeRepository.save(qrCode);
        log.info("QR-–∫–æ–¥ {} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω", token);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Bonus bonus = bonusRepository.findByUserId(qrCode.getUserId()).orElse(null);
        if (bonus != null) {
            log.info("–û–±–Ω—É–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}", qrCode.getUserId());
            bonus.setBalance(0);
            bonus.setLastUpdate(LocalDateTime.now());
            bonusRepository.save(bonus);
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        Order order = orderRepository.findById(qrCode.getOrderId()).orElse(null);
        if (order != null) {
            log.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ID {} –Ω–∞ 'DONE'", order.getId());
            order.setStatus("DONE");
            order.setUpdatedAt(LocalDateTime.now());
            orderRepository.save(order);
        }

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID {} —á–µ—Ä–µ–∑ Telegram", qrCode.getUserId());
        telegramService.sendMessage(qrCode.getUserId(), "‚úÖ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!");

        return "üéâ –ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!";
    }
}
